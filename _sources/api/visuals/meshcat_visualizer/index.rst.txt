:py:mod:`visuals.meshcat_visualizer`
====================================

.. py:module:: visuals.meshcat_visualizer


Module Contents
---------------

.. py:function:: rgb_int_to_hex(rgb: List[int]) -> int

   
   Convert an RGB list of integers to a hexadecimal color value.

.. py:function:: rgb_float_to_hex(rgb: List[float]) -> int

   
   Convert an RGB list of floats to a hexadecimal color value.

.. py:function:: rgba_overwrite(model_rgba: list[float], user_rgba: list[float] | float | None) -> list[float]

   
   Overwrite rgba values with user-defined values.

.. py:class:: MeshPhysicalMaterial(color=16777215, reflectivity=0.5, map=None, side=2, transparent=None, opacity=1.0, linewidth=1.0, wireframe=False, wireframeLinewidth=1.0, vertexColors=False, **kwargs)


   Bases: :py:obj:`meshcat.geometry.GenericMaterial`

   
   A material class with high reflectivity.

.. py:class:: MeshToonMaterial(color=16777215, reflectivity=0.5, map=None, side=2, transparent=None, opacity=1.0, linewidth=1.0, wireframe=False, wireframeLinewidth=1.0, vertexColors=False, **kwargs)


   Bases: :py:obj:`meshcat.geometry.GenericMaterial`

   
   A material class for poster-like rendering.

.. py:class:: SetPropertyCapital(key: str, value: Any, path: str)


   
   Class to set properties with keys that contain a capital letter. This bypasses a bug in Meshcat.
   .. py:attribute:: __slots__
      :value: ['path', 'key', 'value']

      

   .. py:method:: lower() -> dict

      
      Lower

      :returns: *dict* -- Lower


.. py:function:: set_property_capital(visualizer: meshcat.visualizer.Visualizer, key: str, value: Any) -> None

   
   Set property for properties with keys that contain a capital letter.

.. py:function:: close_window(visualizer: meshcat.visualizer.Visualizer) -> None


.. py:class:: Plane(width: float = 1.0, height: float = 1.0, widthSegments: float = 1.0, heightSegments: float = 1.0)


   Bases: :py:obj:`meshcat.geometry.Geometry`

   
   Class that defines a Plane geometry.

   This is implemented in Meshcat, but it is not part of the last released version on PyPI
   .. py:method:: lower(object_data: Any) -> dict

      
      Lower

      :param object_data: Object data
      :type object_data: Any

      :returns: *dict* -- Lower


.. py:function:: set_color(visualizer: meshcat.visualizer.Visualizer, rgba: list[float]) -> None

   
   Set the color of all objects contained in the visualizer.

   .. rubric:: Example

   Set the color of the model "goal":
   set_color(visualizer["goal"], rgba)

.. py:function:: setup_visualizer(visualizer: meshcat.visualizer.Visualizer, axes_visible: bool = True, grid_visible: bool = True, zoom: float = 1.0, camera_pos: list[float] | None = None, top_color: list[float] | None = None, bottom_color: list[float] | None = None, negative_shadow: bool = False, positive_shadow: bool = True) -> None

   
   Set default properties of a visualizer including camera position, background color, shadows.

.. py:function:: add_object(visualizer: meshcat.visualizer.Visualizer, name: str, obj: meshcat.geometry.Geometry, transform: numpy.ndarray, material: meshcat.geometry.Material | None = None) -> None

   
   Add a geometry object to the visualizer.

.. py:function:: add_ground(visualizer: meshcat.visualizer.Visualizer, height: float = 0.0, material: meshcat.geometry.Material | None = None, name: str = 'ground') -> None

   
   Add a ground plane to the visualizer.

.. py:function:: add_plane(visualizer: meshcat.visualizer.Visualizer, size: numpy.ndarray, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'plane') -> None

   
   Add a plane geometry to the visualizer with optional position, quaternion, material, and name.

.. py:function:: add_sphere(visualizer: meshcat.visualizer.Visualizer, radius: float, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'sphere') -> None

   
   Add a sphere geometry to the visualizer with optional position, quaternion, material, and name.

.. py:function:: add_cylinder(visualizer: meshcat.visualizer.Visualizer, radius: float, length: float, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'cylinder') -> None

   
   Add a cylinder geometry to the visualizer with optional position, quaternion, material, and name.

   The cylinder is aligned with the z-axis

.. py:function:: add_box(visualizer: meshcat.visualizer.Visualizer, size: numpy.ndarray, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'box') -> None

   
   Add a box geometry to the visualizer with optional position, quaternion, material, and name.

.. py:function:: add_capsule(visualizer: meshcat.visualizer.Visualizer, radius: float, length: float, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'capsule') -> None

   
   Add a capsule geometry to the visualizer with optional position, quaternion, material, and name.

   The capsule is aligned with the z-axis

.. py:function:: add_ellipsoid(visualizer: meshcat.visualizer.Visualizer, covariance: numpy.ndarray, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'ellipsoid', confidence_interval_mode: bool = False) -> None

   
   Add an ellipsoid geometry to the visualizer

   Add an ellipsoid geometry to the visualizer based on the given covariance matrix,
   with optional position, quaternion, material, and name.

   The orthogonal matrix Q (eigenvectors):
       Q = eigenvectors

   The diagonal matrix sqrt_D (eigenvalues):
       D = np.diag(eigenvalues)

   covariance = Q @ D @ Q.T
   sqrt(covariance) = Q @ sqrt(D) @ Q.T

   With x in N(0, I) we get:
       y = mean + sqrt(covariance) @ x in N(mean, covariance)

.. py:function:: add_mesh_by_name(visualizer: meshcat.visualizer.Visualizer, filename: str, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'mesh') -> None

   
   Add a mesh geometry to the visualizer from a file, with optional position, quaternion, material, and name.

.. py:function:: add_mesh(visualizer: meshcat.visualizer.Visualizer, vertices: numpy.ndarray, faces: numpy.ndarray, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, material: meshcat.geometry.Material | None = None, name: str = 'mesh') -> None

   
   Add a triangular mesh geometry to the visualizer

   Add a triangular mesh geometry to the visualizer with specified vertices and faces,
   with optional position, quaternion, material, and name.

   Vertices: float (N, 3) and faces: int (M, 3).

.. py:function:: set_object(visualizer: meshcat.visualizer.Visualizer, pos: numpy.ndarray | None = None, quat: numpy.ndarray | None = None, name: str = 'object') -> None

   
   Set the transformation (position and orientation) of an object in the visualizer.

