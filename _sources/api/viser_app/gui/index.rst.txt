:py:mod:`viser_app.gui`
=======================

.. py:module:: viser_app.gui


Module Contents
---------------

.. py:data:: DEFAULT_SLIDER_STEP_FLOAT
   :value: 0.01

   

.. py:data:: DEFAULT_SLIDER_STEP_INT
   :value: 1

   

.. py:data:: GOAL_RADIUS
   :value: 0.05

   

.. py:data:: UI_CONFIG
   :value: 'ui_config'

   

.. py:function:: slider(parameter_name: str, min: int | float, max: int | float, step: int | float | None = None) -> Callable

   
   Decorator that adds slider metadata to desired dataclass fields.

   :param parameter_name: target parameter to annotate.
   :param min: minimum value for slider (int or float, must match dtypes of other variables).
   :param max: maximum value for slider (int or float).
   :param step: (optional) step for slider handle. If not set, defaults to constant 0.01 for floats and 1 for ints.

.. py:function:: create_gui_elements(server: viser.ViserServer, config: Any, config_dict: multiprocessing.managers.DictProxy, config_updated_event: multiprocessing.synchronize.Event, config_lock: multiprocessing.synchronize.Lock) -> List[viser.GuiInputHandle]

   
   Recursively iterates through a dataclass, adding GUI elements / callbacks for its fields to a Viser server.

   :param server: current ``ViserServer`` to which the GUI elements are added.
   :param config: dataclass containing params which we want to update via viser.
   :param config_dict: ``multiprocessing.DictProxy`` where param values are shared between threads.
   :param config_updated_event: ``multiprocessing.Event`` that flags when config params are updated.
   :param config_lock: ``multiprocessing.Lock`` that prevents multiple processes from accessing the same param.

   Returns a list of GuiHandles that can be used to remove all elements created here on destruction.

