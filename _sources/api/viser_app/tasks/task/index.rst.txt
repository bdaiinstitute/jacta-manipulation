:py:mod:`viser_app.tasks.task`
==============================

.. py:module:: viser_app.tasks.task


Module Contents
---------------

.. py:class:: TaskConfig


   
   Base task configuration dataclass.

.. py:data:: ConfigT

   

.. py:data:: ModelT

   

.. py:class:: Task


   Bases: :py:obj:`Generic`\ [\ :py:obj:`ConfigT`\ , :py:obj:`ModelT`\ ]

   
   Base container for sampling-based MPC tasks. Implements reward, simulation step, and resetting behavior.
   .. py:property:: nu
      :type: int
      :abstractmethod:

      
      Control dimension for this task.

   .. py:property:: actuator_ctrlrange
      :type: numpy.ndarray
      :abstractmethod:

      
      Actuator limits for this task.

      :returns: A numpy array, shape (self.nu, 2), with self.actuator_ctrlrange[i] = (lower_lim, upper_lim) for actuator i.

   .. py:property:: additional_task_info
      :type: dict[str, Any]
      :abstractmethod:

      
      Get additional state information that might be needed by the controller.

      Use this method to provide task-specific information.

   .. py:property:: dt
      :type: float
      :abstractmethod:

      
      Timestep for this task.

   .. py:method:: create_visualization(server: viser.ViserServer, context: jacta.visualizers.viser_app.io.IOContext, text_handles: dict) -> jacta.visualizers.visualization.Visualization
      :abstractmethod:

      
      Returns a visualizer for the task.

   .. py:method:: reward(states: numpy.ndarray, sensors: numpy.ndarray, controls: numpy.ndarray, config: ConfigT) -> numpy.ndarray
      :abstractmethod:

      
      Abstract reward function for task.

   .. py:method:: sim_step(controls: scipy.interpolate.interp1d) -> None
      :abstractmethod:

      
      Generic simulation step. Reads controls and updates self.data.

   .. py:method:: rollout(models: list[ModelT], states: numpy.ndarray, controls: numpy.ndarray, additional_info: dict[str, Any]) -> tuple[numpy.ndarray, numpy.ndarray]
      :abstractmethod:

      
      Generic threaded rollout. Performs rollouts from a set of states using a set of controls.

   .. py:method:: make_models(num_models: int) -> list[ModelT]
      :abstractmethod:

      
      Method that creates a vector of model/system objects that can be used for rollouts.

   .. py:method:: reset() -> None
      :abstractmethod:

      
      Reset behavior for task. Sets config + velocities to zeros.

   .. py:method:: is_terminated(config: TaskConfig) -> bool
      :abstractmethod:

      
      Defines termination conditions for task.


