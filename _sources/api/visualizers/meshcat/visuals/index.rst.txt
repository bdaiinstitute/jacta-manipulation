:py:mod:`visualizers.meshcat.visuals`
=====================================

.. py:module:: visualizers.meshcat.visuals


Module Contents
---------------

.. py:data:: DEFAULT_PREFIXES
   :value: ['actual', 'desired']

   

.. py:data:: DEFAULT_COLORS

   

.. py:function:: visualize_and_control_model(meshcat: pydrake.geometry.Meshcat, directives_filename: str, initial_joint_values: Optional[numpy.typing.ArrayLike] = None, lower_joint_limits: Optional[numpy.typing.ArrayLike] = None, upper_joint_limits: Optional[numpy.typing.ArrayLike] = None) -> None

   
   Creates a visualization of a meshcat object with sliders attached to manipulate the joints.

.. py:class:: TrajectoryVisualizer(params: jacta.planner.core.parameter_container.ParameterContainer, sim_time_step: float)


   .. py:property:: meshcat
      :type: pydrake.geometry.Meshcat


   .. py:method:: set_directives_prefix(model_directives: pydrake.multibody.parsing.ModelDirectives, prefix: str = 'directive::') -> None

      
      Add a prefix to rename the model directives.
      This function supports the "add_model" and "add_weld" directives.

      :param model_directives: model directives to be renamed.
      :param prefix: the string that will be added in front of the names of all directives.

   .. py:method:: set_color_of_models(plant: pydrake.multibody.plant.MultibodyPlant, model_instances: List[pydrake.multibody.tree.ModelInstanceIndex], scene_graph: pydrake.geometry.SceneGraph, color: Optional[Union[pydrake.geometry.Rgba, float]] = None) -> None

      
      Set the color and transparency of the given model instances.

      :param plant: the multibody plant that contains the model instances.
      :param model_instances: the model instance that will be recolored.
      :param scene_graph: the scene graph to be modified.
      :param color: the new color and transparency as Rgba or just the transparency as a float (between 0 and 1),
      :param if we want to keep the original colors:
      :type if we want to keep the original colors: rgb

   .. py:method:: setup_and_connect(trajectories: List[pydrake.trajectories.PiecewisePolynomial.FirstOrderHold]) -> None


   .. py:method:: update_trajectories(trajectories: List[pydrake.trajectories.PiecewisePolynomial.FirstOrderHold]) -> None


   .. py:method:: visualize_trajectories(trajectories: List[pydrake.trajectories.PiecewisePolynomial.FirstOrderHold], prefixes: List[str], colors: Optional[Dict[str, Union[float, pydrake.geometry.Rgba]]] = None) -> None


   .. py:method:: show(trajectory: torch.FloatTensor, goal_state: Optional[torch.FloatTensor] = None, colors: Optional[Dict[str, Union[float, pydrake.geometry.Rgba]]] = DEFAULT_COLORS) -> None



