:py:mod:`visualizers.viser_app.tasks.cylinder_push`
===================================================

.. py:module:: visualizers.viser_app.tasks.cylinder_push


Module Contents
---------------

.. py:data:: MODEL_PATH
   :value: 'dexterity/models/xml/scenes/legacy/cylinder_push.xml'

   

.. py:class:: CylinderPushConfig


   Bases: :py:obj:`jacta.visualizers.viser_app.tasks.task.TaskConfig`

   
   Reward configuration for the cylinder push task.
   .. py:attribute:: default_command
      :type: Optional[numpy.ndarray]

      

   .. py:attribute:: w_pusher_proximity
      :type: float
      :value: 0.5

      

   .. py:attribute:: w_pusher_velocity
      :type: float
      :value: 0.0

      

   .. py:attribute:: w_cart_position
      :type: float
      :value: 0.1

      

   .. py:attribute:: pusher_goal_offset
      :type: float
      :value: 0.25

      

   .. py:attribute:: cart_goal_position
      :type: numpy.ndarray

      

   .. py:attribute:: cutoff_time
      :type: float
      :value: 0.15

      


.. py:class:: CylinderPush


   Bases: :py:obj:`jacta.visualizers.viser_app.tasks.mujoco_task.MujocoTask`\ [\ :py:obj:`CylinderPushConfig`\ ]

   
   Defines the cylinder push balancing task.
   .. py:method:: reward(states: numpy.ndarray, sensors: numpy.ndarray, controls: numpy.ndarray, config: CylinderPushConfig) -> numpy.ndarray

      
      Implements the cylinder push reward from MJPC.

      Maps a list of states, list of controls, to a batch of rewards (summed over time) for each rollout.

      The cylinder push reward has four terms:

      ::

         * `pusher_reward`, penalizing the distance between the pusher and the cart.
         * `velocity_reward` penalizing squared linear velocity of the pusher.
         * `goal_reward`, penalizing the distance from the cart to the goal.


      Since we return rewards, each penalty term is returned as negative. The max reward is zero.

   .. py:method:: reset() -> None

      
      Resets the model to a default (random) state.


