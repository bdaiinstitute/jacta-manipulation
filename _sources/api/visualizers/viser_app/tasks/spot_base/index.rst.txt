:py:mod:`visualizers.viser_app.tasks.spot_base`
===============================================

.. py:module:: visualizers.viser_app.tasks.spot_base


Module Contents
---------------

.. py:class:: GOAL_POSITIONS


   
   Goal positions of Spot.
   .. py:attribute:: origin
      :type: numpy.ndarray

      

   .. py:attribute:: blue_cross
      :type: numpy.ndarray

      

   .. py:attribute:: black_cross
      :type: numpy.ndarray

      


.. py:data:: DEFAULT_SPOT_ROLLOUT_CUTOFF_TIME
   :value: 0.25

   

.. py:class:: SpotBaseConfig


   Bases: :py:obj:`jacta.visualizers.viser_app.tasks.task.TaskConfig`

   
   Base config for spot tasks.
   .. py:attribute:: default_command
      :type: numpy.ndarray

      

   .. py:attribute:: fall_penalty
      :type: float
      :value: 2500.0

      

   .. py:attribute:: spot_fallen_threshold
      :value: 0.35

      

   .. py:attribute:: w_goal
      :type: float
      :value: 60.0

      

   .. py:attribute:: w_proximity
      :type: float
      :value: 2.0

      

   .. py:attribute:: w_controls
      :type: float
      :value: 0.0

      

   .. py:attribute:: cutoff_time
      :type: float

      


.. py:data:: ConfigT

   

.. py:class:: SpotBase(model_filepath: str, policy_filepath: str)


   Bases: :py:obj:`jacta.visualizers.viser_app.tasks.mujoco_task.MujocoTask`\ [\ :py:obj:`ConfigT`\ ]

   
   Base task for spot locomotion.

   This is an 'abstract' class that should not be instantiated.
   .. py:property:: dt
      :type: float

      
      Effective timestep for this task -- each step is physics_substeps * the mujoco dt.

   .. py:property:: default_idle_command
      :type: numpy.ndarray

      
      Default idling command. Must be defined.

   .. py:method:: sim_step(controls: Optional[scipy.interpolate.interp1d]) -> None

      
      Spot policy physics evaluation. Evaluates policy and steps simulation forward.

      :param controls: either a spline to be interpolated or None, which calls a default command

   .. py:method:: rollout(models: list[mujoco_extensions.policy_rollout.System], states: numpy.ndarray, controls: numpy.ndarray, additional_info: dict[str, Any], output_states: numpy.ndarray, output_sensors: numpy.ndarray) -> tuple[numpy.ndarray, numpy.ndarray]

      
      Threaded rollout for spot RL system.

   .. py:method:: make_models(num_models: int) -> list[mujoco_extensions.policy_rollout.System]

      
      Allocates systems vector to be used for threaded rollout.


