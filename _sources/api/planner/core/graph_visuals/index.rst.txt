:py:mod:`planner.core.graph_visuals`
====================================

.. py:module:: planner.core.graph_visuals


Module Contents
---------------

.. py:function:: rgba_palette(index: int, transparency: float = 1.0) -> pydrake.geometry.Rgba


.. py:function:: color_gradient(color: pydrake.geometry.Rgba, steps: int) -> torch.FloatTensor


.. py:function:: display_point_cloud(meshcat_vis: pydrake.geometry.Meshcat, points: numpy.ndarray | torch.Tensor, path: str = '/points', point_size: float = 0.01, color: pydrake.geometry.Rgba = None) -> None


.. py:function:: display_segments(meshcat_vis: pydrake.geometry.Meshcat, start: numpy.ndarray | torch.Tensor, end: numpy.ndarray | torch.Tensor, path: str = '/segments', line_width: float = 0.01, color: pydrake.geometry.Rgba = None) -> None


.. py:function:: display_colormap_point_cloud(meshcat_vis: pydrake.geometry.Meshcat, points: numpy.ndarray | torch.Tensor, rewards: numpy.ndarray | torch.Tensor, path: str = '/colormap_points', point_size: float = 0.01, num_color_bins: int = 12, transparency: float = 0.7) -> None


.. py:function:: display_edges_by_category(meshcat_vis: pydrake.geometry.Meshcat, starts: numpy.ndarray | torch.Tensor, ends: numpy.ndarray | torch.Tensor, categories: List, edge_size: int = 1, path: str = '/3d_graph/categories') -> None


.. py:function:: display_3d_graph(graph: jacta.planner.core.graph.Graph, logger: jacta.planner.core.logger.Logger, meshcat_vis: pydrake.geometry.Meshcat, vis_scale: Optional[torch.FloatTensor] = None, vis_indices: Optional[List] = None, node_size: float = 0.01, start_goal_size: float = 0.08, edge_size: int = 1, best_path_edge_size: int = 4, segment_color: Optional[pydrake.geometry.Rgba] = None, best_path_color: Optional[pydrake.geometry.Rgba] = None, node_transparency: float = 0.7, display_segment: bool = True, display_best_path: bool = True, display_reward_colormap: bool = True, node_cap: Optional[int] = None, reset_visualizer: bool = True, search_index: int = 0) -> None


