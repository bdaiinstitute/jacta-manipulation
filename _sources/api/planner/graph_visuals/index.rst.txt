:py:mod:`planner.graph_visuals`
===============================

.. py:module:: planner.graph_visuals


Module Contents
---------------

.. py:function:: rgba_palette(index: int, transparency: float = 1.0) -> list[float]

   
   Predefined set of colors for rendering.

.. py:function:: color_gradient(rgba: list[float], steps: int) -> torch.FloatTensor


.. py:function:: display_point_cloud(visualizer: meshcat.visualizer.Visualizer, points: numpy.ndarray | torch.Tensor, name: str = 'points', point_size: float = 0.01, color: numpy.ndarray | list[float] | None = None) -> None

   
   Display point cloud in Meshcat with a specific RGB color and point size.

   :param visualizer: Visualizer
   :type visualizer: Visualizer
   :param points: [num_points, 3]
   :type points: np.ndarray | torch.Tensor
   :param name: Point cloud name. Defaults to "points".
   :type name: str, optional
   :param point_size: Point size. Defaults to 0.01.
   :type point_size: float, optional
   :param color: Points color. Defaults to None.
   :type color: np.ndarray | list[float] | None, optional

.. py:function:: display_segments(visualizer: meshcat.visualizer.Visualizer, start: numpy.ndarray | torch.Tensor, end: numpy.ndarray | torch.Tensor, name: str = 'segments', line_width: float = 1, color: list[float] | None = None) -> None

   
   Display segments in Meshcat with a specific RGB color and line width.

   :param visualizer: Meshcat Visualizer
   :type visualizer: Visualizer
   :param start: [num_points, 3]
   :type start: np.ndarray | torch.Tensor
   :param end: [num_points, 3]
   :type end: np.ndarray | torch.Tensor
   :param name: Segments name. Defaults to "segments".
   :type name: str, optional
   :param line_width: Line width. Defaults to 1.
   :type line_width: list[float], optional
   :param color: Color. Defaults to None
   :type color: list[float] | None, optional

.. py:function:: display_colormap_point_cloud(visualizer: meshcat.visualizer.Visualizer, points: numpy.ndarray | torch.Tensor, rewards: numpy.ndarray | torch.Tensor, is_terminal: numpy.ndarray | torch.Tensor, name: str = 'colormap_points', point_size: float = 0.01, num_color_bins: int = 12) -> None

   
   Display point cloud in Meshcat with a specific RGB color dependent on individual point reward.

   :param visualizer: Meshcat Visualizer
   :type visualizer: Visualizer
   :param points: [num_points, 3]
   :type points: np.ndarray | torch.Tensor
   :param rewards: [num_points]
   :type rewards: np.ndarray | torch.Tensor
   :param is_terminal: is_terminal
   :type is_terminal: np.ndarray | torch.Tensor
   :param name: Colormap name. Defaults to "colormap_points".
   :type name: str, optional
   :param point_size: Point size. Defaults to 0.01.
   :type point_size: float, optional
   :param num_color_bins: Number of color bins. Defaults to 12.
   :type num_color_bins: int, optional

.. py:function:: display_segments_by_category(visualizer: meshcat.visualizer.Visualizer, starts: numpy.ndarray | torch.Tensor, ends: numpy.ndarray | torch.Tensor, categories: list, line_width: int = 1, name: str = 'categories') -> None

   
   Display segments in Meshcat with a specific RGB color dependent on individual point category.

   :param visualizer: Meshcat Visualizer
   :type visualizer: Visualizer
   :param starts: [num_points, 3]
   :type starts: np.ndarray | torch.Tensor
   :param ends: [num_points, 3]
   :type ends: np.ndarray | torch.Tensor
   :param categories: [num_points] list of strings
   :type categories: list
   :param line_width: Line width. Defaults to 1.
   :type line_width: int, optional
   :param name: Segments name. Defaults to 'categories'
   :type name: str, optional

.. py:function:: display_3d_graph(graph: jactamanipulation.planner.planner.graph.Graph, logger: jactamanipulation.planner.planner.logger.Logger, visualizer: meshcat.visualizer.Visualizer, vis_scale: torch.FloatTensor | None = None, vis_indices: list | None = None, node_size: float = 0.01, start_goal_size: float = 0.06, edge_size: int = 1, best_path_edge_size: int = 4, segment_color: list[float] | None = None, best_path_color: list[float] | None = None, node_transparency: float = 0.7, display_segment: bool = True, display_best_path: bool = True, display_reward_colormap: bool = True, reset_visualizer: bool = True, search_index: int = 0) -> None

   
   Display search graph in Meshcat, each node is an vertex, each edge in an action linking 2 vertices.

   :param graph: Planner Graph
   :type graph: Graph
   :param logger: Planner Logger
   :type logger: Logger
   :param visualizer: Meshcat Visualizer
   :type visualizer: Visualizer
   :param vis_scale: Scale. Defaults to None.
   :type vis_scale: FloatTensor | None, optional
   :param vis_indices: Indices. Defaults to None.
   :type vis_indices: list | None, optional
   :param node_size: Node size. Defaults to 0.01.
   :type node_size: float, optional
   :param start_goal_size: Start goal size. Defaults to 0.06.
   :type start_goal_size: float, optional
   :param edge_size: Edge size. Defaults to 1.
   :type edge_size: int, optional
   :param best_path_edge_size: Best path edge size. In pixels. Defaults to 4.
   :type best_path_edge_size: int, optional
   :param segment_color: Segment color. Defaults to None
   :type segment_color: list[float] | None, optional
   :param best_path_color: Best path color. Defaults to None.
   :type best_path_color: list[float] | None, optional
   :param node_transparency: Node transparency. Defaults to 0.7.
   :type node_transparency: float, optional
   :param display_segment: Whether to display segment or not. Defaults to True.
   :type display_segment: bool, optional
   :param display_best_path: Whether to display best path or not. Defaults to True.
   :type display_best_path: bool, optional
   :param display_reward_colormap: Whether to display reward colormap or not. Defaults to True.
   :type display_reward_colormap: bool, optional
   :param reset_visualizer: Whether to reset visualizer or not. Defaults to True.
   :type reset_visualizer: bool, optional
   :param search_index: Search index. Defaults to 0.
   :type search_index: int, optional

