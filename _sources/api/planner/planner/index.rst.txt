:py:mod:`planner.planner`
=========================

.. py:module:: planner.planner


Module Contents
---------------

.. py:class:: Planner(plant: jactamanipulation.planner.dynamics.mujoco_dynamics.MujocoPlant, graph: jactamanipulation.planner.planner.graph.Graph, action_sampler: jactamanipulation.planner.planner.action_sampler.ActionSampler, graph_worker: jactamanipulation.planner.planner.graph_worker.GraphWorker, logger: jactamanipulation.planner.planner.logger.Logger, params: jactamanipulation.planner.planner.parameter_container.ParameterContainer, verbose: bool = False)


   
   Planner
   .. py:method:: reset() -> None

      
      Reset

   .. py:method:: search() -> None

      
      Searches through the space for a trajectory to the goal state.

   .. py:method:: path_data(start_id: int, end_id: int) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]

      
      Returns the states, start and end actions, on the shortest path from start_id to end_id

      Returns the states, start actions, and end actions on the shortest path from
      start_id to end_id.

   .. py:method:: shortest_path_data(search_index: int = 0) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]

      
      Returns the states, actions, and action time steps on the shortest path

      Returns the states, actions, and action time steps on the shortest path from
      the root to the node closest to the goal.

   .. py:method:: path_trajectory(path_data: Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]) -> torch.FloatTensor

      
      Returns the trajectory for path_data.

   .. py:method:: shortest_path_trajectory(search_index: int = 0) -> torch.FloatTensor

      
      Returns the trajectory on the shortest path from the root to the node closest to the goal.

   .. py:method:: plot_search_results() -> None

      
      Plot search results


