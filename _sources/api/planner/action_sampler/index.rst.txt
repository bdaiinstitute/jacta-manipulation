:py:mod:`planner.action_sampler`
================================

.. py:module:: planner.action_sampler


Module Contents
---------------

.. py:class:: ActionSampler(plant: dexterity.jacta_planner.dynamics.mujoco_dynamics.MujocoPlant, graph: dexterity.jacta_planner.planner.graph.Graph, params: dexterity.jacta_planner.planner.parameter_container.ParameterContainer)


   
   ActionSampler
   .. py:method:: reset() -> None

      
      Re initializes the action sampler

   .. py:method:: initialize(plant: dexterity.jacta_planner.dynamics.mujoco_dynamics.MujocoPlant, graph: dexterity.jacta_planner.planner.graph.Graph, params: dexterity.jacta_planner.planner.parameter_container.ParameterContainer) -> None

      
      Initializes the action sampler internal state

      :param plant: Simulation plant
      :type plant: MujocoPlant
      :param graph: Graph
      :type graph: Graph
      :param params: Params
      :type params: ParameterContainer

   .. py:method:: random_directions(node_ids: torch.IntTensor) -> torch.FloatTensor

      
      Generate a random direction.

   .. py:method:: proximity_directions(node_ids: torch.IntTensor) -> torch.FloatTensor

      
      Generate a direction based on the proximity gradient.

   .. py:method:: continuation_directions(node_ids: torch.IntTensor) -> torch.FloatTensor

      
      Generate same direction as in-edge action.

   .. py:method:: goal_directions(node_ids: torch.IntTensor) -> torch.FloatTensor

      
      Generates directions with dynamics gradients.

      We formulate a quadratic objective from linearized dynamics, the action minimizing
      the distance to goal is calculated with optimization.

   .. py:method:: directions_actions(node_ids: torch.IntTensor, directions: torch.FloatTensor) -> torch.FloatTensor

      
      Calculate a set of actions based on sampled directions and the node's last action

      :param node_ids: node ids we are looking to extend
      :param directions: (k, nq) set of directions are looking to expand the node in

      :returns: Set of trajectories expanded in the directions

   .. py:method:: __call__(node_ids: torch.IntTensor) -> Tuple[torch.FloatTensor, int, dexterity.jacta_planner.planner.types.ActionType]

      
      Combines each method of sampling to select an action and potentially project it into the eigenspace


