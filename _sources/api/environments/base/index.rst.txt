:py:mod:`environments.base`
===========================

.. py:module:: environments.base


Module Contents
---------------

.. py:class:: DexterityEnv


   
   Base environment class for dexterity tasks.
   .. py:property:: observation_space
      :type: types.SimpleNamespace

      
      Return the observation space of the environment.

   .. py:property:: action_space
      :type: types.SimpleNamespace

      
      Return the action space of the environment.

   .. py:property:: metrics_keys
      :type: list[str]

      
      Return the keys of the metrics for the environment.

   .. py:attribute:: params
      :type: dexterity.jacta_planner.planner.parameter_container.ParameterContainer

      

   .. py:method:: __post_init__() -> None


   .. py:method:: setup_plant() -> None

      
      Set up the MujocoPlant for the environment.

   .. py:method:: setup_action_processor() -> None

      
      Set up the ActionProcessor for the environment.

   .. py:method:: setup_buffers() -> None

      
      Initialize buffers for storing environment state and trackers.

   .. py:method:: scale_actions(actions: torch.Tensor) -> torch.Tensor

      
      Scale the given actions to the appropriate range.

   .. py:method:: uniform_random_action() -> torch.Tensor

      
      Generate uniform random actions for all environments.

   .. py:method:: get_metrics() -> dict

      
      Calculate and return metrics for the current state of the environment.

   .. py:method:: reset() -> tuple[torch.Tensor, dict]

      
      Reset the environment and return the initial observations and info dictionary.

      This reset only needs to be called once at the beginning of the training loop.
      Otherwise, the environment is reset automatically when individual episodes end.

   .. py:method:: reset_ixs(ixs: torch.IntTensor) -> None

      
      Reset specific environments identified by their indices.

   .. py:method:: update_joint_targets(actions: torch.Tensor) -> torch.Tensor

      
      Update joint targets based on the given actions.

   .. py:method:: step_sim() -> None

      
      Perform a simulation step using the plant dynamics.

   .. py:method:: post_physics_step() -> None

      
      Perform post-processing after a physics step.

   .. py:method:: check_success() -> torch.Tensor

      
      Check if the current state meets the success criteria.

   .. py:method:: check_failure() -> torch.Tensor

      
      Check if the current state meets the failure criteria.

   .. py:method:: update_terminations() -> None

      
      Update termination conditions for all environments.

   .. py:method:: task_rewards() -> torch.Tensor

      
      Calculate task-specific rewards.

   .. py:method:: update_rewards() -> None

      
      Update rewards for all environments.

   .. py:method:: process_resets() -> None

      
      Process resets for environments that need it.

   .. py:method:: update_obs() -> None

      
      Update the observation tensor.

   .. py:method:: preserve_reset_obs() -> None

      
      Preserve the last observations of environments that need to be reset.

      Used to query the Q-function for the last observation of non-terminal last steps.

   .. py:method:: update_info() -> None

      
      Update the info dictionary with current environment information.

   .. py:method:: step(actions: torch.Tensor) -> tuple[torch.Tensor, torch.Tensor, torch.Tensor, torch.Tensor, dict]

      
      Perform a step in the environment given the actions.

   .. py:method:: reset_states(env_ixs: torch.IntTensor) -> None

      
      Reset the states for specific environments.

   .. py:method:: set_previous_end_actions(start_states: torch.FloatTensor, env_ixs: torch.IntTensor) -> None

      
      Set the previous end actions for specific environments.

   .. py:method:: set_current_states(states: torch.FloatTensor, env_ixs: torch.IntTensor) -> None

      
      Set the current states for specific environments.

   .. py:method:: set_goal_states(states: torch.FloatTensor, env_ixs: torch.IntTensor) -> None

      
      Set the goal states for specific environments.

   .. py:method:: set_start_states(states: torch.FloatTensor, env_ixs: torch.IntTensor) -> None

      
      Set the start states for specific environments.

   .. py:method:: close() -> None

      
      Close the environment and perform any necessary cleanup.


