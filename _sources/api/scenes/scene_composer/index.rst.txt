:py:mod:`scenes.scene_composer`
===============================

.. py:module:: scenes.scene_composer


Module Contents
---------------

.. py:function:: override(f: Callable) -> Callable


.. py:class:: mjBodyWrapper


   
   Wrapper for MuJoCo body objects that provides simplified child body attachment and attribute access.
   .. py:attribute:: body
      :type: mujoco.MjsBody

      

   .. py:method:: attach(child_body: mujoco.MjsBody, name: str | None = None) -> None

      
      Attach a child body to this body using a frame.

   .. py:method:: __getattr__(name: str) -> Any

      
      Delegate attribute access to the wrapped MjsBody instance.

   .. py:method:: __setattr__(name: str, value: Any) -> None

      
      Delegate attribute setting to the wrapped MjsBody instance, except for the 'body' attribute.


.. py:class:: ModelElement


   
   Base class for MuJoCo model elements that handles XML loading, includes management, and body access.
   .. py:property:: body
      :type: mjBodyWrapper

      
      Get the main body of this model element based on the model name.

   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: xml_content
      :type: str
      :value: '<mujoco><worldbody></worldbody></mujoco>'

      

   .. py:attribute:: header_includes
      :type: dict

      

   .. py:method:: from_file(name: str, xml_path: pathlib.Path, header_includes: dict | None = None) -> ModelElement
      :classmethod:

      
      Load an XML file and create a ModelElement.

   .. py:method:: from_string(name: str, xml_content: str, header_includes: dict | None = None) -> ModelElement
      :classmethod:

      
      Create a ModelElement from an XML string.

   .. py:method:: autoload(f: Callable) -> Callable
      :staticmethod:

      
      Decorator to ensure the spec is loaded before executing the decorated function.

   .. py:method:: load(header_includes: dict | None = None) -> None

      
      Load/initialize the model element with parameters.

      :param name: Name for the model element
      :param header_includes: Dictionary of include files to use

   .. py:method:: __getitem__(key: str) -> mjBodyWrapper

      
      Get the body of this model element based on the body name.

   .. py:method:: to_xml_string() -> str

      
      Generate XML string from MjSpec.

   .. py:method:: to_xml_file(path: pathlib.Path) -> None

      
      Write XML string to file.


.. py:class:: SpotRobot


   Bases: :py:obj:`ModelElement`

   
   Model element representing a Spot robot with base, legs, and arm components.
   .. py:property:: body
      :type: mjBodyWrapper

      
      Get the main body of this model element based on the model name.

   .. py:attribute:: name
      :type: str
      :value: 'spot'

      

   .. py:attribute:: xml_dir
      :type: pathlib.Path

      

   .. py:method:: load(header_includes: dict | None = None) -> None

      
      Load the Spot robot model element.


.. py:class:: Scene


   Bases: :py:obj:`ModelElement`

   
   Model element representing a complete MuJoCo scene composed of multiple model elements.
   .. py:attribute:: name
      :type: str
      :value: 'scene'

      

   .. py:attribute:: elements
      :type: dict

      

   .. py:attribute:: sensors
      :type: list

      

   .. py:attribute:: contacts
      :type: list

      

   .. py:attribute:: xml_dir
      :type: pathlib.Path

      

   .. py:method:: load(header_includes: dict | None = None) -> None

      
      Load the scene model element.


.. py:function:: make_default_header_includes(xml_dir: pathlib.Path, asset_dir: pathlib.Path) -> dict


