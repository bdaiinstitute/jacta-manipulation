:py:mod:`learning.replay_buffer`
================================

.. py:module:: learning.replay_buffer


Module Contents
---------------

.. py:class:: ReplayBuffer(plant: jacta.planner.dynamics.simulator_plant.SimulatorPlant, params: jacta.planner.core.parameter_container.ParameterContainer)


   .. py:method:: reset() -> None


   .. py:method:: reset_next_temporary_id() -> None


   .. py:method:: add_nodes(root_ids: torch.IntTensor, parent_ids: torch.IntTensor, states: torch.FloatTensor, start_actions: torch.FloatTensor, end_actions: torch.FloatTensor, relative_actions: torch.FloatTensor, temporary: bool = False, sub_goal_state: torch.FloatTensor = None) -> int


   .. py:method:: sampling(batch_size: int, her_probability: float, reward_function: Callable) -> Tuple[torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor, torch.FloatTensor]

      
      Sample a batch at random with HER goal resampling from replay experience.

      :param batch_size: Batch size.
      :param her_probability: Probability of resampling a goal with an achieved goal.
      :param reward_function: Reward function of the environment to recalculate the rewards.

      :returns: A tuple of the sampled state, action, reward, next_state, goal batch.

      :raises Assertion error: Dimension check on states failed.


