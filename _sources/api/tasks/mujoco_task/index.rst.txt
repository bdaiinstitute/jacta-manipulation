:py:mod:`tasks.mujoco_task`
===========================

.. py:module:: tasks.mujoco_task


Module Contents
---------------

.. py:class:: MujocoTask(model_path: str = '')


   Bases: :py:obj:`jactamanipulation.tasks.task.Task`\ [\ :py:obj:`jactamanipulation.tasks.task.ConfigT`\ , :py:obj:`Tuple`\ [\ :py:obj:`mujoco.MjModel`\ , :py:obj:`mujoco.MjData`\ ]\ ]

   
   Container for task based on Mujoco
   .. py:property:: additional_task_info
      :type: dict[str, Any]

      
      Get additional state information that might be needed by the controller.

      Override this method in child classes to provide task-specific information.

   .. py:property:: nu
      :type: int

      
      Number of control inputs. The same as the MjModel for this task.

   .. py:property:: actuator_ctrlrange
      :type: numpy.ndarray

      
      Mujoco actuator limits for this task.

   .. py:property:: dt
      :type: float

      
      Returns Mujoco physics timestep for default physics task.

   .. py:property:: default_idle_command
      :type: numpy.ndarray

      
      Default idling command for the task.

   .. py:method:: create_visualization(server: viser.ViserServer, context: jactamanipulation.viser_app.io.IOContext, text_handles: dict) -> None

      
      Returns a visualizer for the task.

   .. py:method:: sim_step(controls: scipy.interpolate.interp1d) -> None

      
      Generic mujoco simulation step.

   .. py:method:: rollout(models: list[Tuple[mujoco.MjModel, mujoco.MjData]], states: numpy.ndarray, controls: numpy.ndarray, additional_info: dict[str, Any]) -> tuple[numpy.ndarray, numpy.ndarray]

      
      Generic mujoco threaded rollout.

   .. py:method:: make_models(num_models: int) -> list[Tuple[mujoco.MjModel, mujoco.MjData]]

      
      Makes a list of (MjModel, MjData) tuples for use with rollouts.

   .. py:method:: reset() -> None

      
      Reset behavior for task. Sets config + velocities to zeros.

   .. py:method:: is_terminated(config: jactamanipulation.tasks.task.TaskConfig) -> bool

      
      Defines if the current state is terminal.


