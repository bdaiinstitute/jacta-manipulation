:py:mod:`tasks.cartpole`
========================

.. py:module:: tasks.cartpole


Module Contents
---------------

.. py:data:: MODEL_PATH
   :value: 'dexterity/models/xml/scenes/legacy/cartpole.xml'

   

.. py:class:: CartpoleConfig


   Bases: :py:obj:`dexterity.tasks.task.TaskConfig`

   
   Reward configuration for the cartpole task.
   .. py:attribute:: default_command
      :type: Optional[numpy.ndarray]

      

   .. py:attribute:: w_vertical
      :type: float
      :value: 10.0

      

   .. py:attribute:: w_centered
      :type: float
      :value: 10.0

      

   .. py:attribute:: w_velocity
      :type: float
      :value: 0.1

      

   .. py:attribute:: w_control
      :type: float
      :value: 0.1

      

   .. py:attribute:: p_vertical
      :type: float
      :value: 0.01

      

   .. py:attribute:: p_centered
      :type: float
      :value: 0.1

      

   .. py:attribute:: cutoff_time
      :type: float
      :value: 0.15

      


.. py:class:: Cartpole


   Bases: :py:obj:`dexterity.tasks.mujoco_task.MujocoTask`\ [\ :py:obj:`CartpoleConfig`\ ]

   
   Defines the cartpole balancing task.
   .. py:method:: reward(states: numpy.ndarray, sensors: numpy.ndarray, controls: numpy.ndarray, config: CartpoleConfig) -> numpy.ndarray

      
      Implements the cartpole reward from MJPC.

      Maps a list of states, list of controls, to a batch of rewards (summed over time) for each rollout.

      The cartpole reward has four terms:

      ::

         * `vertical_rew`, penalizing the distance between the pole angle and vertical.
         * `centered_rew`, penalizing the distance from the cart to the origin.
         * `velocity_rew` penalizing squared linear and angular velocity.
         * `control_rew` penalizing any actuation.


      Since we return rewards, each penalty term is returned as negative. The max reward is zero.

      :returns: A list of rewards shaped (batch_size,) where reward at index i represents the reward for that batched traj

   .. py:method:: reset() -> None

      
      Resets the model to a default (random) state.

   .. py:method:: is_terminated(config: CartpoleConfig) -> bool

      
      Termination condition for cartpole. End if position / velocity are small enough.


